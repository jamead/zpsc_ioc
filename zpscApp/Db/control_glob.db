
####  Reconnects and PSC write 



# Flush reg to socket buffer, trigger send to send all socket buffer to PSC 
record(bo, "$(P){$(NO)}send") { 
    field(DTYP, "PSC Ctrl Send All") 
    field(OUT , "@PSC$(NO)") 
    field(ZNAM, "Send") 
    field(ONAM, "Send") 
} 
 


 
# Write a single register
record(longout, "$(P){$(NO)}GoRegSingleWrite0") {
    field(DTYP, "PSC Ctrl Send")
    field(OUT , "@PSC$(NO)")
    field(VAL , "0") 
    field(FLNK, "$(P){$(NO)}send")
}
 
# Write a single register
record(longout, "$(P){$(NO)}GoRegSingleWrite1") {
    field(DTYP, "PSC Ctrl Send")
    field(OUT , "@PSC$(NO)")
    field(VAL , "1") 
    field(FLNK, "$(P){$(NO)}send")
}

# Write a single register
record(longout, "$(P){$(NO)}GoRegSingleWrite2") {
    field(DTYP, "PSC Ctrl Send")
    field(OUT , "@PSC$(NO)")
    field(VAL , "2") 
    field(FLNK, "$(P){$(NO)}send")
}

# Write a single register
record(longout, "$(P){$(NO)}GoRegSingleWrite3") {
    field(DTYP, "PSC Ctrl Send")
    field(OUT , "@PSC$(NO)")
    field(VAL , "3") 
    field(FLNK, "$(P){$(NO)}send")
}


# Write a single register
record(longout, "$(P){$(NO)}GoRegSingleWrite4") {
    field(DTYP, "PSC Ctrl Send")
    field(OUT , "@PSC$(NO)")
    field(VAL , "4") 
    field(FLNK, "$(P){$(NO)}send")
}

#record(waveform, "$(P){$(NO)}Waveform-Test") {
#    field(DESC, "Buffer to PSC")
#    field(DTYP, "PSC Block F32 Out")
#    field(INP , "@PSC$(NO) 101")   
#    field(FTVL, "DOUBLE")
#    field(NELM, "20")
#    #field(SCAN, "1 second")
#    field(FLNK, "$(P){$(NO)}send")
#}





############# Control PV's ##########################################

record(stringin, "$(P){$(NO)}RampTableFile") {
    field(DESC, "Selected File Path")
    field(VAL, "/default/path/to/file.txt")
}



### Global Settings

record(bo, "$(P){$(NO)}KeepAlive-SP") {
    field(DESC, "Keeps the socket active")
    field(DTYP, "PSC Single U32")
    field(OUT , "@PSC$(NO) 5 100")
    field(SCAN, "1 second")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}



#record(bo, "$(P){$(NO)}Trig:Usr-SP") {
#    field(DESC, "Soft Trigger by user")
#    field(DTYP, "PSC Single U32")
#    field(OUT , "@PSC$(NO) 0 0")
#    field(ZNAM,"Rdy")
#    field(ONAM,"Trig")
#    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
#    field(HIGH,".5")    #500 ms after low
#}

record(mbbo, "$(P){$(NO)}Trig:Usr-SP") {
    field(DESC, "Soft Trigger by user")
    field(DTYP, "PSC Single U32")
    field(OUT , "@PSC$(NO) 0 0")
    field( ZRST, "User Chan1")
    field( ONST, "User Chan2")
    field( TWST, "User Chan3")
    field( THST, "User Chan4")
    field( ZRVL, "1")
    field( ONVL, "2")
    field( TWVL, "4")
    field( THVL, "8")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}
 
 


# Testing PV's, will be removed
record(mbbo, "$(P){$(NO)}Trig:Fault-SP") {
    field(DESC, "Simulate a fault trigger")
    field(DTYP, "PSC Single U32")
    field(OUT , "@PSC$(NO) 0 4")
    #field( PINI, "YES")
    field( ZRST, "Flt Chan1")
    field( ONST, "Flt Chan2")
    field( TWST, "Flt Chan3")
    field( THST, "Flt Chan4")
    field( FRST, "Err Chan1")
    field( FVST, "Err Chan2")
    field( SXST, "Err Chan3")
    field( SVST, "Err Chan4")
    field( EIST, "Inj Chan1") 
    field( NIST, "Inj Chan2")
    field( TEST, "Inj Chan3")
    field( ELST, "Inj Chan4")
    field( TVST, "EVR")       
    field( ZRVL, "1")
    field( ONVL, "2")
    field( TWVL, "4")
    field( THVL, "8")
    field( FRVL, "16")    # Bit 4
    field( FVVL, "32")    # Bit 5
    field( SXVL, "64")    # Bit 6
    field( SVVL, "128")   # Bit 7
    field( EIVL, "256")   # Bit 8 
    field( NIVL, "512")   # Bit 9
    field( TEVL, "1024")  # Bit 10
    field( ELVL, "2048")  # Bit 11
    field( TVVL, "4096")  # Bit 12     
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
 
}




record(bo, "$(P){$(NO)}LEDs-SP") {
    field(DESC, "Control the LEDs on the PSC")
    field(DTYP, "PSC Single U32")
    field(OUT , "@PSC$(NO) 0 8")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}

record(bo, "$(P){$(NO)}EVR:Reset-SP") {
    field(DESC, "EVR Reset")
    field(DTYP, "PSC Single U32")
    field(OUT , "@PSC$(NO) 0 16")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}


record(longout, "$(P){$(NO)}EVR:Inj-EventNo-SP") {
    field(DESC, "EVR Event Code for Injection Event")
    field(DTYP, "PSC Single I32")  
    field(OUT , "@PSC$(NO) 0 20")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}

record(longout, "$(P){$(NO)}EVR:PM-EventNo-SP") {
    field(DESC, "EVR Event Code for Post Mortem Event")
    field(DTYP, "PSC Single I32")  
    field(OUT , "@PSC$(NO) 0 24")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}

record(longout, "$(P){$(NO)}EVR:1Hz-EventNo-SP") {
    field(DESC, "EVR Event Code for 1Hz Event")
    field(DTYP, "PSC Single I32")  
    field(OUT , "@PSC$(NO) 0 28")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}

record(longout, "$(P){$(NO)}EVR:10Hz-EventNo-SP") {
    field(DESC, "EVR Event Code for 10Hz Event")
    field(DTYP, "PSC Single I32")  
    field(OUT , "@PSC$(NO) 0 32")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}

record(longout, "$(P){$(NO)}EVR:10KHz-EventNo-SP") {
    field(DESC, "EVR Event Code for 10KHz Event")
    field(DTYP, "PSC Single I32")  
    field(OUT , "@PSC$(NO) 0 36")
    info(autosaveFields, "VAL")
    field(FLNK, "$(P){$(NO)}GoRegSingleWrite0")
}





